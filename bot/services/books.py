import asyncio
import logging
from typing import Optional, List, Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from bot.database.repositories import BookRepository
from bot.services.ai import AIService
from bot.services.images import ImageService
from bot.utils.helpers import rate_limit
from bot.utils.config import Config

logger = logging.getLogger(__name__)


class BookService:
    def __init__(self, config: Config):
        self.config = config
        self.repository = BookRepository(config.DATABASE_NAME)
        self.ai_service = AIService(config)
        self.image_service = ImageService()

        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        self.MAIN_MENU_KEYBOARD = [
            [InlineKeyboardButton("üìñ –ü–æ –∂–∞–Ω—Ä–∞–º", callback_data='genres')],
            [InlineKeyboardButton("‚úçÔ∏è –ü–æ –∞–≤—Ç–æ—Ä–∞–º", callback_data='authors')],
            [InlineKeyboardButton("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data='recommend')],
            [InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data='generate_image')],
            [InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='favorites')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
        ]

        self.GENRES = [
            "–§—ç–Ω—Ç–µ–∑–∏", "–î–µ—Ç–µ–∫—Ç–∏–≤", "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–ò—Å—Ç–æ—Ä–∏—è",
            "–†–æ–º–∞–Ω—Ç–∏–∫–∞", "–¢—Ä–∏–ª–ª–µ—Ä", "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è", "–ü–æ—ç–∑–∏—è"
        ]

        self.AUTHORS = [
            "–°—Ç–∏–≤–µ–Ω –ö–∏–Ω–≥", "–§—ë–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–ê–≥–∞—Ç–∞ –ö—Ä–∏—Å—Ç–∏",
            "–î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª", "–î–∂. –ö. –†–æ—É–ª–∏–Ω–≥", "–î–∂. –†. –¢–æ–ª–∫–∏–Ω"
        ]

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_message = (
            f"üìö –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "–Ø - —É–º–Ω—ã–π –∫–Ω–∏–∂–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:\n"
            "‚Ä¢ –ù–∞–π—Ç–∏ –ª—É—á—à–∏–µ –∫–Ω–∏–≥–∏ –ø–æ –ª—é–±–æ–π —Ç–µ–º–µ\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∫–Ω–∏–≥–∏\n\n"
            "–ù–∞–ø–∏—à–∏ —Ç–µ–º—É –∫–Ω–∏–≥–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ /help –¥–ª—è –º–µ–Ω—é."
        )

        await update.message.reply_text(welcome_message)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        reply_markup = InlineKeyboardMarkup(self.MAIN_MENU_KEYBOARD)
        await update.message.reply_text("üìö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        stats = self.repository.get_user_stats(user_id)
        favorites_count = len(self.repository.get_user_favorites(user_id))

        message = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['query_count']}\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['last_active']}\n"
            f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–Ω–∏–≥: {favorites_count}\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–Ω–∏–≥–∏!"
        )

        await update.message.reply_text(message)

    async def recommend_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        past_queries = self.repository.get_user_queries(user_id, limit=5)

        if not past_queries:
            await update.message.reply_text("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.")
            return

        prompt = " | ".join(past_queries)
        await update.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {prompt}...")

        try:
            response = await self.ai_service.generate_books_recommendation(prompt)
            await update.message.reply_text(response, parse_mode="Markdown")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç
            self.repository.save_query(user_id, prompt, response)
        except Exception as e:
            logger.error(f"Recommendation error: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")

    @rate_limit(5)
    async def handle_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–∏—Å–∫ –∫–Ω–∏–≥"""
        user_id = update.effective_user.id
        query = update.message.text.strip()

        if len(query) > self.config.MAX_QUERY_LENGTH:
            await update.message.reply_text(
                f"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ú–∞–∫—Å–∏–º—É–º {self.config.MAX_QUERY_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        await update.message.reply_text("üîç –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–Ω–∏–≥–∏...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached = self.repository.get_cached_response(query)
            if cached:
                await update.message.reply_text(cached, parse_mode="Markdown")
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            response = await self.ai_service.generate_books_recommendation(query)
            await update.message.reply_text(response, parse_mode="Markdown")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self.repository.save_query(user_id, query, response)
        except Exception as e:
            logger.error(f"Search error: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥.")

    async def show_genres(self, update: Update) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton(genre, callback_data=f"genre:{genre}")]
            for genre in self.GENRES
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])

        await update.callback_query.edit_message_text(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def show_authors(self, update: Update) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤—Ç–æ—Ä–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton(author, callback_data=f"author:{author}")]
            for author in self.AUTHORS
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])

        await update.callback_query.edit_message_text(
            "‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def handle_genre_author_selection(self, update: Update, selection_type: str, value: str) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        await update.callback_query.edit_message_text(f"üîç –ò—â—É –∫–Ω–∏–≥–∏ {selection_type}: {value}...")

        try:
            response = await self.ai_service.generate_books_recommendation(value)
            self.repository.save_query(user_id, value, response)

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
            keyboard = [
                [InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_fav:{value}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"{selection_type}s")]
            ]

            await update.callback_query.message.reply_text(
                response,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Genre/author search error: {e}")
            await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")

    async def show_favorites(self, update: Update) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        favorites = self.repository.get_user_favorites(user_id)

        if not favorites:
            await update.callback_query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–Ω–∏–≥.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–∏–≥–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton(f"{i + 1}. {book['title'][:20]}...", callback_data=f"show_fav:{i}"),
                InlineKeyboardButton("‚ùå", callback_data=f"del_fav:{book['title']}")
            ]
            for i, book in enumerate(favorites)
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')])

        await update.callback_query.edit_message_text(
            "‚≠ê –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def generate_book_image(self, update: Update) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        past_queries = self.repository.get_user_queries(user_id, limit=3)

        if not past_queries:
            await update.callback_query.edit_message_text("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        prompt = ", ".join(past_queries)
        await update.callback_query.edit_message_text(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º...")

        try:
            image_url = await self.image_service.generate(prompt)
            if image_url:
                await update.callback_query.message.reply_photo(
                    photo=image_url,
                    caption="üñº –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
                    ])
                )
            else:
                await update.callback_query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        except Exception as e:
            logger.error(f"Image generation error: {e}")
            await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")